@Library('shared-libs')
import groovy.transform.Field;
import odos.libs.GithubIssue;
import odos.libs.GithubStatus;
def printInfo() {
  def items = [
  ghprbActualCommit,
  ghprbActualCommitAuthor,
  ghprbActualCommitAuthorEmail,
  ghprbPullDescription,
  ghprbPullId,
  ghprbPullLink,
  ghprbPullTitle,
  ghprbSourceBranch,
  ghprbTargetBranch,
  ghprbCommentBody,
  sha1
  ]
  items.each { item ->
  println item
  }
}

def makeStatus(String stage, String status) {
  withCredentials([usernamePassword(credentialsId: '6SY24UieZprtlw1M3NdpiTvo1CfSFt9vPqVlzSqJ', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {
    GithubStatus githubStatus = new GithubStatus()
    def ECR_IMAGE_NAME = 'testing'
    githubStatus.setToken(TOKEN)
    githubStatus.setStatus(status)
    githubStatus.setDescription("${stage}:${status}")
    githubStatus.setStatusContext("${ECR_IMAGE_NAME}/${stage}")
    githubStatus.setGitCommit(GIT_COMMIT)
    githubStatus.setRepoName('pipeline-libs')
    githubStatus.setOrgName('stephencshelton')
    githubStatus.setBuildUrl(BUILD_URL)
    githubStatus.createStatus()
  }
}

pipeline {
  agent none
  stages {
    stage('testing') {
    agent { label 'master' }
      steps {
        script {
          try {
            withCredentials([usernamePassword(credentialsId: '6SY24UieZprtlw1M3NdpiTvo1CfSFt9vPqVlzSqJ', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {
              GithubIssue githubIssue = new GithubIssue()
              githubIssue.setIssueBody("testing things")
              githubIssue.setIssueTitle("Issue Title ${ghprbSourceBranch}")
              githubIssue.setAuthor([ghprbActualCommitAuthor])
              githubIssue.setToken(TOKEN)
              githubIssue.setOrgName('stephencshelton')
              githubIssue.setRepoName('pipeline-libs')
              githubIssue.createIssue()
            }
            makeStatus('Build', 'success')
          }
          catch (err) {
            println 'something broke'
            makeStatus('Build', 'success')
            throw err
          }
        }
      }
    }
    stage('notification') {
      agent { label 'master' }
      steps {
        echo "notification"
      }
    }
  }
}
