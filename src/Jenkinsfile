@Library('shared-libs')
import groovy.transform.Field;
import odos.libs.GithubIssue;
import odos.libs.GithubStatus;

def makeStatus(String stage, String status) {
  withCredentials([usernamePassword(credentialsId: '6SY24UieZprtlw1M3NdpiTvo1CfSFt9vPqVlzSqJ', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {
    GithubStatus githubStatus = new GithubStatus()
    githubStatus.setToken(TOKEN)
    githubStatus.setStatus(status)
    githubStatus.setDescription("${stage}:${status}")
    githubStatus.setStatusContext("${ECR_IMAGE_NAME}/${stage}")
    githubStatus.setGitCommit(GIT_COMMIT)
    githubStatus.setBuildUrl(BUILD_URL)
    githubStatus.createStatus()
  }
}

def makeIssue(String stage) {
  withCredentials([usernamePassword(credentialsId: '6SY24UieZprtlw1M3NdpiTvo1CfSFt9vPqVlzSqJ', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {
    GithubIssue githubIssue = new GithubIssue()
    githubIssue.setToken(TOKEN)
    githubIssue.setIssueBody("Error during build, check ${BUILD_URL}")
    githubIssue.setIssueTitle("${ghprbSourceBranch} ${ECR_IMAGE_NAME} ${stage} Failure")
    githubIssue.setAuthor([ghprbActualCommitAuthor])
    githubIssue.createIssue()
  }
}

pipeline {
  agent none
  environment {
    REGISTRY_URL      = '998750339583.dkr.ecr.us-east-1.amazonaws.com'
    ECR_IMAGE_NAME = 'odos/notifications'
    DOCKER_IMAGE_NAME = 'sample'
  }
  stage('Build') {
       agent {
          docker { 
            image '998750339583.dkr.ecr.us-east-1.amazonaws.com/sevatec/jhipster-gradle:latest'
            args '-v /home/ec2-user/.gradle:/home/gradle/.gradle -w /home/gradle/project'
          }
        }
        steps {
          script {
              makeStatus('Build', 'success')
            }
        }
    }
    stage('Test'){
      agent {
          docker { 
            image '998750339583.dkr.ecr.us-east-1.amazonaws.com/sevatec/jhipster-gradle:latest'
            args '-v /home/ec2-user/.gradle:/home/gradle/.gradle -w /home/gradle/project'
          }
      }
      steps {
        script {
              makeStatus('Test', 'success')
            }
        }
      }
    stage('SonarQube Analysis'){
      agent {
          docker { 
            image '998750339583.dkr.ecr.us-east-1.amazonaws.com/sevatec/jhipster-gradle:latest'
            args '--network=jenkinspipeline_sonar-network -v /home/ec2-user/.gradle:/home/gradle/.gradle -w /home/gradle/project'
          }
      }
      steps {
        script {
              makeStatus('SonarQube', 'success')
            }
        }
      }
    }
  post {
    always {
      node('master') {
        cleanWs()
      }
    }
  }
}
