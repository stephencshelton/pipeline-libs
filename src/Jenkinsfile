@Library('shared-libs')
import groovy.transform.Field;
import odos.libs.GithubIssue;
import odos.libs.GithubStatus;
def printInfo() {
  def items = [
  ghprbActualCommit,
  ghprbActualCommitAuthor,
  ghprbActualCommitAuthorEmail,
  ghprbPullDescription,
  ghprbPullId,
  ghprbPullLink,
  ghprbPullTitle,
  ghprbSourceBranch,
  ghprbTargetBranch,
  ghprbCommentBody,
  sha1
  ]
  items.each { item ->
  println item
  }
}

pipeline {
  agent none
  stages {
    stage('testing') {
    agent { label 'master' }
      steps {
        script {
          try {
            withCredentials([usernamePassword(credentialsId: 'amazon', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {
              printInfo() 
              GithubIssue githubIssue = new GithubIssue()
              githubIssue.setBody("testing things")
              githubIssue.setTitle("Issue Title: ${ghprbSourceBranch}")
              githubIssue.setAuthor(ghprbActualCommitAuthor)
              githubIssue.setToken(TOKEN)
              githubIssue.setOrgName('stephencshelton')
              githubIssue.setRepoName('pipeline-libs')
              githubIssue.createIssue()
            }
          }
          catch (err) {
            println 'something broke'
            throw err
          }
        }
      }
    }
    stage('notification') {
      agent { label 'master' }
      steps {
        echo "notification"
      }
    }
  }
}
